"1.1", "Rule", "Required", "A Standard C environment", "The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementations's translations limits"
"1.2", "Rule", "Advisory", "A Standard C environment", "Language extensions should not be used"
"1.3", "Rule", "Required", "A Standard C environment", "There shall be no occurence of undefined or critical unspcified behavior"
"2.1", "Rule", "Required", "Unused Code", "A project shall not contain unreachable code"
"2.2", "Rule", "Required", "Unused Code", "There shall be no dead code"
"2.3", "Rule", "Advisory", "Unused Code", "A project shall not contain unused type declarations"
"2.4", "Rule", "Advisory", "Unused Code", "A project should not contain unused tag declarations"
"2.5", "Rule", "Advisory", "Unused Code", "A project should not contain unused macro declarations"
"2.6", "Rule", "Advisory", "Unused Code", "A functions should not contain unused label declarations"
"2.7", "Rule", "Advisory", "Unused Code", "There should be no unused parameters in functions"
"3.1", "Rule", "Required", "Comments", "The character sequences /* and // shall not be used within a comment"
"3.2", "Rule", "Required", "Comments", "Line-splicing shall not be used in // comments"
"4.1", "Rule", "Required", "Character sets and lexical conventions", "Octal and headecimal escape sequences shall be terminated"
"4.2", "Rule", "Advisory", "Character sets and lexical conventions", "trigraphs should not be used"
"5.1", "Rule", "Required", "Identifiers", "External identifiers shall be distinct"
"5.2", "Rule", "Required", "Identifiers", "Identifiers declared in the same scope and name space shall be distinct"
"5.3", "Rule", "Required", "Identifiers", "An identifier declared in an inner scope shall not hide an identifier declared in an outer scope"
"5.4", "Rule", "Required", "Identifiers", "Macro identifiers shall be distinct"
"5.5", "Rule", "Required", "Identifiers", "Identifiers shall be distinct from macro names"
"5.6", "Rule", "Required", "Identifiers", "A typedef name shall be a unique identifier"
"5.7", "Rule", "Required", "Identifiers", "A tag name shall be a unique identifier"
"5.8", "Rule", "Required", "Identifiers", "Identifiers that define objects or functions with external linkage shall be unique"
"5.9", "Rule", "Advisory", "Identifiers", "Identifiers that define objects or functions with internal linkage should be unique"
"6.1", "Rule", "Required", "Types", "Bit-fields shall only be declared with an appropriate type"
"6.2", "Rule", "Required", "Types", "Single-bit named bit fields shall not be of a signed type"
"7.1", "Rule", "Required", "Literals and constants", "Octal constants shall not be used"
"7.2", "Rule", "Required", "Literals and constants", "A u or U suffix shall be applied to all integer constants that are represented in an unsigned type"
"7.3", "Rule", "Required", "Literals and constants", "The lowercase character I shall not be used in a literal suffix"
"7.4", "Rule", "Required", "Literals and constants", "A string literal shall not be assigned to an object unless the objects type is pointer to const-qualified char"
"8.1", "Rule", "Required", "Declarations and definitions", "Types shall be explicitly specified"
"8.2", "Rule", "Required", "Declarations and definitions", "Function types shall be prototype form with named parameters"
"8.3", "Rule", "Required", "Declarations and definitions", "All declarations of an object or function shall use the same names and type qualifiers"
"8.4", "Rule", "Required", "Declarations and definitions", "A compatible declarations shall be visible when an object or function with external linkage is defined"
"8.5", "Rule", "Required", "Declarations and definitions", "An external object or function shall be declared once in one and only one file"
"8.6", "Rule", "Required", "Declarations and definitions", "( Strict | Special  An identifier with external linkage shall have exactly one external definition"
"8.7", "Rule", "Advisory", "Declarations and definitions", "Functions and objects should not be defined with external linkage if they are referenced in only one translation unit"
"8.8", "Rule", "Required", "Declarations and definitions", "The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage"
"8.9", "Rule", "Advisory", "Declarations and definitions", "An object should be defined at block scope if its identifier only appears in a single function"
"8.10", "Rule", "Required", "Declarations and definitions", "An inline functionshall be declared with the static storage class"
"8.11", "Rule", "Advisory", "Declarations and definitions", "When an array with external linkage is declared, its size should be explicitly specified"
"8.12", "Rule", "Required", "Declarations and definitions", "Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique"
"8.13", "Rule", "Advisory", "Declarations and definitions", "A pointer should point to a const-qualified type whenever possible"
"8.14", "Rule", "Required", "Declarations and definitions", "the restrict type qualifier shall not be used"
"9.1", "Rule", "Mandatory", "Initialization", "The value of an object with automatic storage duration shall not be read before it has been initialized"
"9.2", "Rule", "Required", "Initialization", "the initializer for an aggragate or union shall be enclosed in braces"
"9.3", "Rule", "Required", "Initialization", "Arrays shall not be partially initialized"
"9.4", "Rule", "Required", "Initialization", "An element of an object shall not be initialized more than once"
"9.5", "Rule", "Required", "Initialization", "Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly"
"10.1", "Rule", "Required", "The essential type model", "Operands shall not be of an inappropriate essential type"
"10.2", "Rule", "Required", "The essential type model", "Expressions of essential character type shall not be used inappropriately in addition and subtraction operations"
"10.3", "Rule", "Required", "The essential type model", "The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category"
"10.4", "Rule", "Required", "The essential type model", "Both operands of an operator in which the useal arithmetic conversions are performed shall have the same essential type category"
"10.5", "Rule", "Advisory", "The essential type model", "The value of en expression should not be cast to an inappropriate essential type"
"10.6", "Rule", "Required", "The essential type model", "The valu of a composite expression shall not be assigned to an object with wider essential type"
"10.7", "Rule", "Required", "The essential type model", "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have  wider essential type"
"10.8", "Rule", "Required", "The essential type model", "The value of a composite expression shall not be cast to a different essential type category or a wider essential type"
"11.1", "Rule", "Required", "Pointer type conversions", "Conversions shall not be performed between a pointer to a function and any other type"
"11.2", "Rule", "Required", "Pointer type conversions", "Conversions shall not be performed between a pointer to an incomplete type and any other type"
"11.3", "Rule", "Required", "Pointer type conversions", "A cast shall not be perfromed between a pointer to object type and a pointer to a different object type"
"11.4", "Rule", "Advisory", "Pointer type conversions", "A conversion should not be performed between a pointer to object and an integer type"
"11.5", "Rule", "Advisory", "Pointer type conversions", "A conversion should not be performed from pointer to void into pointer to object"
"11.6", "Rule", "Required", "Pointer type conversions", "A cast shall not be performed between pointer to void and an arithmetic type"
"11.7", "Rule", "Required", "Pointer type conversions", "A cast shall not be performed between pointer to object and a non-integer arithmetic type"
"11.8", "Rule", "Required", "Pointer type conversions", "A cast shall not remove any any const or volatile qualification from the type pointed to by a pointer"
"11.9", "Rule", "Required", "Pointer type conversions", "The macro NULL shall be the only permitted form of integer null pointer constant"
"12.1", "Rule", "Advisory", "Expressions", "The precedence of operators within expressions should be made explicit"
"12.2", "Rule", "Required", "Expressions", "The right hand operator of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand"
"12.3", "Rule", "Advisory", "Expressions", "The comma operator should not be used"
"12.4", "Rule", "Advisory", "Expressions", "Evaluation ofconstant expressions should not lead to unsigned integer wrap-around"
"13.4", "Rule", "Required", "Side effects", "Initializer lists shall not contain persisten side effects"
"13.5", "Rule", "Required", "Side effects", "The valu of an expression and its persistent side effects shall be the same under all permitted evaluation orders"
"13.6", "Rule", "Advisory", "Side effects", "A full expression containing an increment(++ or decrement(-- operator should have no other potential side effects other than that caused by the increment or decrement operator"
"13.7", "Rule", "Advisory", "Side effects", "The result of an assignement operator should not be used"
"13.8", "Rule", "Required", "Side effects", "The right hand operator of a logical && or || operator shall not contain persistent side effects"
"13.9", "Rule", "Mandatory", "Side effects", "The operand of the sizeof operator shall not contain any expression which has potential side effects"
"14.1", "Rule", "Required", "Control statement expressions", "A loop countershall not have essentially floating type"
"14.2", "Rule", "Required", "Control statement expressions", "A for loop shall be well-formed"
"14.3", "Rule", "Required", "Control statement expressions", "Controlling expressions shall not be invariant"
"14.4", "Rule", "Required", "Control statement expressions", "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type"
"15.1", "Rule", "Advisory", "Control flow", "The goto statement should not be used"
"15.2", "Rule", "Required", "Control flow", "The goto statement shall jump to a label declared later in the same function"
"15.3", "Rule", "Required", "Control flow", "Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement"
"15.4", "Rule", "Advisory", "Control flow", "There should be no more than one break or goto statement used to terminate any iteration statement"
"15.5", "Rule", "Advisory", "Control flow", "A function should have a single point of exit at the end."
"15.6", "Rule", "Required", "Control flow", "The body of an iteration-statement or a selection-statement shall be a compound-statement"
"15.7", "Rule", "Required", "Control flow", "All if … else if constructs shall be terminated with an else statement"
"16.1", "Rule", "Required", "Switch statements", "All switch statements shall be well-formed"
"16.2", "Rule", "Required", "Switch statements", "A switch label shall only be used when the moste closely-enclosing compound statement is the body of a switch-clause"
"16.3", "Rule", "Required", "Switch statements", "An unconditional break statement shall terminate every switch-clause"
"16.4", "Rule", "Required", "Switch statements", "Every switch statement shall have a default label"
"16.5", "Rule", "Required", "Switch statements", "A default label shall appear as either the first or the last switch label of a switch statement"
"16.6", "Rule", "Required", "Switch statements", "Every switch statement shall have at least two switch-clauses"
"16.7", "Rule", "Required", "Switch statements", "A switch-expression shall not have essentially Boolean type"
"17.1", "Rule", "Required", "Functions", "The features of <stdarg.h> shall not be used"
"17.2", "Rule", "Required", "Functions", "Functions shall not call themselves, either directly or indirectly"
"17.3", "Rule", "Mandatory", "Functions", "A function shall not be declared implicitly"
"17.4", "Rule", "Mandatory", "Functions", "All exit paths from a function with non-void return type shall have an explicit return statement with an expression"
"17.5", "Rule", "Advisory", "Functions", "The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements"
"17.6", "Rule", "Mandatory", "Functions", "The declaration of an array parameter shall not contain the static keyword between the []"
"17.7", "Rule", "Required", "Functions", "the value returned by a function having non-void return type shall be used"
"17.1", "Rule", "Advisory", "Functions", "A function parameter should not be modified"
"18.1", "Rule", "Required", "Pointers and arrays", "A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand"
"18.2", "Rule", "Required", "Pointers and arrays", "Subtraction between pointers shall only be applied to pointers that address elements of the same array"
"18.3", "Rule", "Required", "Pointers and arrays", "The relational operators >,>=,< and <= shall not be applied to objects of pointer type except where they point into the same object"
"18.4", "Rule", "Advisory", "Pointers and arrays", "The +, -, += and -= operators should not be applied to an expression of pointer type"
"18.5", "Rule", "Advisory", "Pointers and arrays", "Declarations should contain no more than two levels of pointer nesting"
"18.6", "Rule", "Required", "Pointers and arrays", "The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist"
"18.7", "Rule", "Required", "Pointers and arrays", "Flexible array members shall not be declared"
"18.1", "Rule", "Required", "Pointers and arrays", "Variable-length array types shall not be used"
"19.1", "Rule", "Mandatory", "Overlapping storage", "An object shall not be assigned or copied to an overlapping object"
"19.2", "Rule", "Advisory", "Overlapping storage", "The union keyword should not be used"
"20.1", "Rule", "Advisory", "Preprocessing directives", "#include directives should only be preceded by preprocessor directives or comments"
"20.2", "Rule", "Required", "Preprocessing directives", "The ', or \ charactersand the /* or // character sequences shall not occur in a header file name"
"20.3", "Rule", "Required", "Preprocessing directives", "The #include directive shall be followed by either a <filename> or Filename sequence"
"20.4", "Rule", "Required", "Preprocessing directives", "A macro shall not be defined with the same name as a keyword"
"20.5", "Rule", "Advisory", "Preprocessing directives", "#undef should not be used"
"20.6", "Rule", "Required", "Preprocessing directives", "Tokens that look like a preprocessing directive shall not occur within a macro argument"
"20.7", "Rule", "Required", "Preprocessing directives", "Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses"
"20.8", "Rule", "Required", "Preprocessing directives", "The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1"
"20.9", "Rule", "Required", "Preprocessing directives", "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation"
"20.10", "Rule", "Advisory", "Preprocessing directives", "The # and ## preprocessor operators should not be used"
"20.11", "Rule", "Required", "Preprocessing directives", "A macro parameter immediately following a # operator shall not immediately be followed by a ## operator"
"20.12", "Rule", "Required", "Preprocessing directives", "A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators"
"20.13", "Rule", "Required", "Preprocessing directives", "A line whose first token is # shall be a valid preprocessing directive"
"20.14", "Rule", "Required", "Preprocessing directives", "All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related"
"21.1", "Rule", "Required", "Standard libraries", "#define and #undef shall not be used on a reserved identifier or reserved macro name"
"21.2", "Rule", "Required", "Standard libraries", "A reserved identifier or macro name shall not be declared"
"21.3", "Rule", "Required", "Standard libraries", "The memory allocation and deallocation functions of <stdlib.h> shall not be used"
"21.4", "Rule", "Required", "Standard libraries", "The standard header file <setjmp.h> shall not be used"
"21.5", "Rule", "Required", "Standard libraries", "The standard header file <signal.h> shall not be used"
"21.6", "Rule", "Required", "Standard libraries", "The Standard Library input/output functions shall not be used"
"21.7", "Rule", "Required", "Standard libraries", "The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used"
"21.8", "Rule", "Required", "Standard libraries", "The library functions abort, exit, getenv and system of <stdlib.h> shall not be used"
"21.9", "Rule", "Required", "Standard libraries", "The library functions bsearch and qsort of <stdlib.h> shall not be used"
"21.10", "Rule", "Required", "Standard libraries", "The Standard Library time and date functions shall not be used"
"21.11", "Rule", "Required", "Standard libraries", "The standard header file <tgmath.h> shall not be used"
"21.12", "Rule", "Advisory", "Standard libraries", "The exception handling features of <fenv.h> should not be used"
"22.1", "Rule", "Required", "Resources", "All resources obtained dynamically by means of Standard Library functions shall be explicityle released"
"22.2", "Rule", "Mandatory", "Resources", "A block of memeory shall only be freed if it was allocated by means of a Standard Library function"
"22.3", "Rule", "Required", "Resources", "The same file shall not be open for read and write at the same time on different streams"
"22.4", "Rule", "Mandatory", "Resources", "there shall be no attempt to write to a stream which has been opened as read-only"
"22.5", "Rule", "Mandatory", "Resources", "A pointer to a FILE object shall no be dereferenced"
"22.6", "Rule", "Mandatory", "Resources", "The value of a pointer to a FILE shall not be used after the associated stream has been closed"