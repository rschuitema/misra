"""0-1-1""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""A project shall not contain unreachable code"
"""0-1-2""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""A project shall not contain infeasible paths"""
"""0-1-3""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""A project shall not contain unused variables"""
"""0-1-4""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""A project shall not contain non-volatile POD variables having only one use"""
"""0-1-5""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""A project shall not contain unused type declarations"""
"""0-1-6""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""A project shall not contain unused type declarations"""
"""0-1-7""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""The values returned by a function having a non-void return type that is not an overloaded operatro shall always be used"""
"""0-1-8""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""All functions with void return type shall have external side effect(s)"""
"""0-1-9""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""There shall be no dead code"""
"""0-1-10""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""Every define function shall be called at least once"""
"""0-1-11""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""There shall be no unused parameters (named or unnamed) in non-virtual functions"""
"""0-1-12""";"""Rule""";" ""Required""";"""Unnecessary constructs""";"""There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it"""
"""0-2-1""";"""Rule""";" ""Required""";"""Storage""";"""An object shall not be assigned to an overlapping object"""
"""0-3-1""";"""Rule""";" ""Document""";"""Runtime failures""";"""Minimization of run-time failures shall be ensured by the use of at least on of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; © explicit coding of checks to handle run-time faults"""
"""0-3-2""";"""Rule""";" ""Required""";"""Runtime failures""";"""If a function generates error information, then that error information shall be tested"""
"""0-4-1""";"""Rule""";" ""Document""";"""Arithmetic""";"""Use of scaled-integer or fixed-point arithmetic shall be documented"""
"""0-4-2""";"""Rule""";" ""Document""";"""Arithmetic""";"""Use of floating-point arithmetic shall be documented"""
"""0-4-3""";"""Rule""";" ""Document""";"""Arithmetic""";"""Floating point implementations shall comply with a defined floating-point standard"""
"""1-0-1""";"""Rule""";" ""Required""";"""Language""";"""All code shall conform to ISO/IEC 14882:2003 'The C++ Standard Incorporation Techical Corrigendum 1'"""
"""1-0-2""";"""Rule""";" ""Document""";"""Language""";"""Multiple compilers shall only be used if they have a common, defined interface"""
"""1-0-3""";"""Rule""";" ""Document""";"""Language""";"""The implementation of integer division in the chosen compiler shall be determined and documented"""
"""2-2-1""";"""Rule""";" ""Document""";"""Character sets""";"""The character set and the corresponding encoding shall be documented"""
"""2-3-1""";"""Rule""";" ""Required""";"""Trigraph sequences""";"""Trigraph shall not be used"""
"""2-5-1""";"""Rule""";"""Advisory""";"""Alternative tokens""";"""Digraphs should not be used"""
"""2-7-1""";"""Rule""";" ""Required""";"""Comments""";"""The character sequence /* shall not be used within a C-style comment"""
"""2-7-2""";"""Rule""";" ""Required""";"""Comments""";"""Sections of code shall not be 'commented out' using C-style comments"""
"""2-7-3""";"""Rule""";"""Advisory""";"""Comments""";"""Sections of code should not be 'commented out' using C++ comments"""
"""2-10-1""";"""Rule""";" ""Required""";"""Identifiers""";"""Different identifiers shall be typographically unambiguous"""
"""2-10-2""";"""Rule""";" ""Required""";"""Identifiers""";"""Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope"""
"""2-10-3""";"""Rule""";" ""Required""";"""Identifiers""";"""A typedef name (including qualification, if any) shall be a unique identifier"""
"""2-10-4""";"""Rule""";" ""Required""";"""Identifiers""";"""A class, union or enum name (including qualification, if any) shall be a unique identifier"""
"""2-10-5""";"""Rule""";"""Advisory""";"""Identifiers""";"""The identifier name of a non-member object or function with static storage duration should not be reused"""
"""2-10-6""";"""Rule""";" ""Required""";"""Identifiers""";"""If an identifier refers to a type, it shall not also refer to an object or a function in the same scope"""
"""2-13-1""";"""Rule""";" ""Required""";"""Literals""";"""Only those escape sequences that are defined in  ISO/IEC 14882:2003 shall be used"""
"""2-13-2""";"""Rule""";" ""Required""";"""Literals""";"""Octal constants (other than zero) and octal escap sequences (other than '\0') shall not be used"""
"""2-13-3""";"""Rule""";" ""Required""";"""Literals""";"""A 'U' suffix shall be applied to all octal or hexadecimal integer literals of unsigned type"""
"""2-13-4""";"""Rule""";" ""Required""";"""Literals""";"""Litteral suffixes shall be upper case"""
"""2-13-5""";"""Rule""";" ""Required""";"""Literals""";"""Narrow and wide string literals shall not be concatenated"""
"""3-1-1""";"""Rule""";" ""Required""";"""Declarations and definitions""";"""It shall be possible to include any header file in multiples translation units without violation the 'One Definition Rule'"""
"""3-1-2""";"""Rule""";" ""Required""";"""Declarations and definitions""";"""Functions shall not be declared at block scope"""
"""3-1-3""";"""Rule""";" ""Required""";"""Declarations and definitions""";"""When an array is declared, its size shall either be stated explicitely or defined implicitly be initialization"""
"""3-2-1""";"""Rule""";" ""Required""";"""One Definition Rule""";"""All declarations of an object or function shall have compatible types"""
"""3-2-2""";"""Rule""";" ""Required""";"""One Definition Rule""";"""The One Definition Rule shall not be violated"""
"""3-2-3""";"""Rule""";" ""Required""";"""One Definition Rule""";"""A type, object or function that is used in multiple translation units shall be declared in one and only one file"""
"""3-2-4""";"""Rule""";" ""Required""";"""One Definition Rule""";An Identifier with external linkage shall have exactly one definition
"""3-3-1""";"""Rule""";" ""Required""";"""Declarative regions and scope""";Objects or functions with external linkage shall be declared in a header file
"""3-3-2""";"""Rule""";" ""Required""";"""Declarative regions and scope""";If a function has internal linkage then all re-declarations shall include the static storage class specifier
"""3-4-1""";"""Rule""";" ""Required""";"""Name lookup""";An identifier declared to vbe an object or type shall be defined in a block that minimizes its visibility
"""3-9-1""";"""Rule""";" ""Required""";"""Types""";The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations
"""3-9-2""";"""Rule""";"""Advisory""";"""Types""";typedefs that indicate size and signedness whoudl be used in place of the basic numerical types
"""3-9-3""";"""Rule""";" ""Required""";"""Types""";The underlying bit representations of floating-point values shall not be used
"""4-5-1""";"""Rule""";" ""Required""";"""Integral promotions""";Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &&, ||, !, the equality operators == and !=, the unary & operator, and the conditional operator
"""4-5-2""";"""Rule""";" ""Required""";"""Integral promotions""";Expressions with type enum shall not be used as operands to built-in operators other than the subscript operator [], the assignment operator =. The equality operators == and !=, the unary & operator, and the relational operators <, <=, >, >=
"""4-5-3""";"""Rule""";" ""Required""";"""Integral promotions""";Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator
"""4-10-1""";"""Rule""";" ""Required""";"""Pointer conversions""";NULL shall not be used as an integer value
"""4-10-2""";"""Rule""";" ""Required""";"""Pointer conversions""";Literal zero (0) shall not be used as the null-pointer-constant
"""5-0-1""";"""Rule""";" ""Required""";"""Expressions""";The value of an expression shall be the same under any order of evaluation that the standard permits
"""5-0-2""";"""Rule""";"""Advisory""";"""Expressions""";Limited dependence should be placed on C++ operator precedence rules in expressions
"""5-0-3""";"""Rule""";" ""Required""";"""Expressions""";A cvalue expression shall not be implicitely converted to a different underlying type
"""5-0-4""";"""Rule""";" ""Required""";"""Expressions""";An implicit integral conversion shall not change the sigendness of the underlying type
"""5-0-5""";"""Rule""";" ""Required""";"""Expressions""";Ther shall be no implicit floating-integral conversions
"""5-0-6""";"""Rule""";" ""Required""";"""Expressions""";An implicit integral or floating-point conversion shall not reduce the size of the underlying type
"""5-0-7""";"""Rule""";" ""Required""";"""Expressions""";There shall be no explicit floating-integral conversion of a cvalue expression
"""5-0-8""";"""Rule""";" ""Required""";"""Expressions""";An explicit integral or floating-integral conversion shall not increase the size of the underlying type of a cvalue expression
"""5-0-9""";"""Rule""";" ""Required""";"""Expressions""";An explicit integral conversion shall not change the signedness of the underlying type ofa cvalue expression
"""5-0-10""";"""Rule""";" ""Required""";"""Expressions""";If the bitwise operators ~ and << are applied to an opreand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand
"""5-0-11""";"""Rule""";" ""Required""";"""Expressions""";The plain char type shall only be used for the storage and use of character values
"""5-0-12""";"""Rule""";" ""Required""";"""Expressions""";signed char and unsigned char type shall only be used for the storage and use of numeric values
"""5-0-13""";"""Rule""";" ""Required""";"""Expressions""";The condition of an if-statement and the condition fo an iteration-statement shall have type bool
"""5-0-14""";"""Rule""";" ""Required""";"""Expressions""";the first operand of a conditional-operator shall have type bool
"""5-0-15""";"""Rule""";" ""Required""";"""Expressions""";Array indexing shall be the only form of pointer arithmetic
"""5-0-16""";"""Rule""";" ""Required""";"""Expressions""";A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array
"""5-0-17""";"""Rule""";" ""Required""";"""Expressions""";Subtraction between pointers shall only be applied to pointers that address elements of the same array
"""5-0-18""";"""Rule""";" ""Required""";"""Expressions""";>,>=,<,<= shall not be applied to objects of pointer type, except where they point to the same array
"""5-0-19""";"""Rule""";" ""Required""";"""Expressions""";the declaration of objects shall contain no more than two levels of pointer indirection
"""5-0-20""";"""Rule""";" ""Required""";"""Expressions""";Non-constant operands to a binary bitwise operator shall have the same underlying type
"""5-0-21""";"""Rule""";" ""Required""";"""Expressions""";Bitwise operators shall only be applied to operands of unsigned underlying type
"""5-2-1""";"""Rule""";" ""Required""";"""Postfix expressions""";Each operand of a logical && or || shall be a postfix-expression
"""5-2-2""";"""Rule""";" ""Required""";"""Postfix expressions""";A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast
"""5-2-3""";"""Rule""";"""Advisory""";"""Postfix expressions""";Casts from a base class to a derived class should not be performed on polymorphic types
"""5-2-4""";"""Rule""";" ""Required""";"""Postfix expressions""";C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used
"""5-2-5""";"""Rule""";" ""Required""";"""Postfix expressions""";A cast shall not remove any const or volatile qualification from the type of a pointer or reference
"""5-2-6""";"""Rule""";" ""Required""";"""Postfix expressions""";A cast shall not convert a pointer to a function toany other pointer type, including a pointer to function type
"""5-2-7""";"""Rule""";" ""Required""";"""Postfix expressions""";An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly
"""5-2-8""";"""Rule""";" ""Required""";"""Postfix expressions""";An object with integer type or pointer to void type shall not be converted to an object with pointer type
"""5-2-9""";"""Rule""";"""Advisory""";"""Postfix expressions""";A cast should not convert a pointer type to an integral type
"""5-2-10""";"""Rule""";"""Advisory""";"""Postfix expressions""";The increment (++) and decrement (--) operators should not be mixed with other operators in an expression
"""5-2-11""";"""Rule""";" ""Required""";"""Postfix expressions""";The comman operator, && operator and the || operator shall not be overloaded
"""5-2-12""";"""Rule""";" ""Required""";"""Postfix expressions""";An identifier with array type passed as a function argument shall not decay to a pointer
"""5-3-1""";"""Rule""";" ""Required""";"""Unary expressions""";Each operand of the ! Operator, the logical && or the logical || operators shall have type bool
"""5-3-2""";"""Rule""";" ""Required""";"""Unary expressions""";The unary minus operator shall not be applied to an expression whose underlying type is unsigned
"""5-3-3""";"""Rule""";" ""Required""";"""Unary expressions""";The unary & operator shall not be overloaded
"""5-3-4""";"""Rule""";" ""Required""";"""Unary expressions""";Evaluationof the operand to the sizeof operator shall not contain side effects
"""5-8-1""";"""Rule""";" ""Required""";"""Shift operators""";The right hand operand of a shift operator shall lie between zero and one less thatn the width in bits of the underlying type of the left hand operand
"""5-14-1""";"""Rule""";" ""Required""";"""Logical AND operator""";The right hand operand of a logical && or || operator shall not contain side effects
"""5-17-1""";"""Rule""";" ""Required""";"""Assignment operators""";The semantic equivalence between a binary operator and its assignement operator from shall be preserved
"""5-18-1""";"""Rule""";" ""Required""";"""Comma operator""";The comma operator shall not be used
"""5-19-1""";"""Rule""";"""Advisory""";"""Constant expressions""";Evaluation of constant unsigned integer expressions should not lead to wrap-around
"""6-2-1""";"""Rule""";" ""Required""";"""Expression statement""";
"""6-2-2""";"""Rule""";" ""Required""";"""Expression statement""";
"""6-2-3""";"""Rule""";" ""Required""";"""Expression statement""";
"""6-3-1""";"""Rule""";" ""Required""";"""Compound statement""";
"""6-4-1""";"""Rule""";" ""Required""";"""Selection statement""";
"""6-4-2""";"""Rule""";" ""Required""";"""Selection statement""";
"""6-4-3""";"""Rule""";" ""Required""";"""Selection statement""";
"""6-4-4""";"""Rule""";" ""Required""";"""Selection statement""";
"""6-4-5""";"""Rule""";" ""Required""";"""Selection statement""";
"""6-4-6""";"""Rule""";" ""Required""";"""Selection statement""";
"""6-4-7""";"""Rule""";" ""Required""";"""Selection statement""";
"""6-4-8""";"""Rule""";" ""Required""";"""Selection statement""";
"""6-5-1""";"""Rule""";" ""Required""";"""Iteration statements""";
"""6-5-2""";"""Rule""";" ""Required""";"""Iteration statements""";
"""6-5-3""";"""Rule""";" ""Required""";"""Iteration statements""";
"""6-5-4""";"""Rule""";" ""Required""";"""Iteration statements""";
"""6-5-5""";"""Rule""";" ""Required""";"""Iteration statements""";
"""6-5-6""";"""Rule""";" ""Required""";"""Iteration statements""";
"""6-6-1""";"""Rule""";" ""Required""";"""Jump statements""";
"""6-6-2""";"""Rule""";" ""Required""";"""Jump statements""";
"""6-6-3""";"""Rule""";" ""Required""";"""Jump statements""";
"""6-6-4""";"""Rule""";" ""Required""";"""Jump statements""";
"""6-6-5""";"""Rule""";" ""Required""";"""Jump statements""";
"""6-6-6""";"""Rule""";" ""Required""";"""Jump statements""";
"""7-1-1""";"""Rule""";" ""Required""";"""Specifiers""";
"""7-1-2""";"""Rule""";" ""Required""";"""Specifiers""";
"""7-2-1""";"""Rule""";" ""Required""";"""Enumerations declarations""";
"""7-3-1""";"""Rule""";" ""Required""";"""Namespaces""";
"""7-3-2""";"""Rule""";" ""Required""";"""Namespaces""";
"""7-3-3""";"""Rule""";" ""Required""";"""Namespaces""";
"""7-3-4""";"""Rule""";" ""Required""";"""Namespaces""";
"""7-3-5""";"""Rule""";" ""Required""";"""Namespaces""";
"""7-3-6""";"""Rule""";" ""Required""";"""Namespaces""";
"""7-4-1""";"""Rule""";"""Document""";"""The asm declaration""";
"""7-4-2""";"""Rule""";" ""Required""";"""The asm declaration""";
"""7-4-3""";"""Rule""";" ""Required""";"""The asm declaration""";
"""7-5-1""";"""Rule""";" ""Required""";"""Linkage specifications""";
"""7-5-2""";"""Rule""";" ""Required""";"""Linkage specifications""";
"""7-5-3""";"""Rule""";" ""Required""";"""Linkage specifications""";
"""7-5-4""";"""Rule""";"""Advisory""";"""Linkage specifications""";
"""8-0-1""";"""Rule""";" ""Required""";"""Declarators - General""";
"""8-3-1""";"""Rule""";" ""Required""";"""Meaning of declarators""";
"""8-4-1""";"""Rule""";" ""Required""";"""Functions definitions""";
"""8-4-2""";"""Rule""";" ""Required""";"""Functions definitions""";
"""8-4-3""";"""Rule""";" ""Required""";"""Functions definitions""";
"""8-4-4""";"""Rule""";" ""Required""";"""Functions definitions""";
"""8-5-1""";"""Rule""";" ""Required""";"""Declarators - Initializers""";
"""8-5-2""";"""Rule""";" ""Required""";"""Declarators - Initializers""";
"""8-5-3""";"""Rule""";" ""Required""";"""Declarators - Initializers""";
"""9-3-1""";"""Rule""";" ""Required""";"""Member functions""";
"""9-3-2""";"""Rule""";" ""Required""";"""Member functions""";
"""9-3-3""";"""Rule""";" ""Required""";"""Member functions""";
"""9-5-1""";"""Rule""";" ""Required""";"""Unions""";
"""9-6-1""";"""Rule""";"""Document""";"""Bit-fields""";
"""9-6-2""";"""Rule""";" ""Required""";"""Bit-fields""";
"""9-6-3""";"""Rule""";" ""Required""";"""Bit-fields""";
"""9-6-4""";"""Rule""";" ""Required""";"""Bit-fields""";
"""10-1-1""";"""Rule""";"""Advisory""";"""Multiple base classes""";
"""10-1-2""";"""Rule""";" ""Required""";"""Multiple base classes""";
"""10-1-3""";"""Rule""";" ""Required""";"""Multiple base classes""";
"""10-2-1""";"""Rule""";"""Advisory""";"""Member name lookup""";
"""10-3-1""";"""Rule""";" ""Required""";"""Virtual functions""";
"""10-3-2""";"""Rule""";" ""Required""";"""Virtual functions""";
"""10-3-3""";"""Rule""";" ""Required""";"""Virtual functions""";
"""11-0-1""";"""Rule""";" ""Required""";"""Member access control - General""";
"""12-1-1""";"""Rule""";" ""Required""";"""Constructors""";
"""12-1-2""";"""Rule""";"""Advisory""";"""Constructors""";
"""12-1-3""";"""Rule""";" ""Required""";"""Constructors""";
"""12-8-1""";"""Rule""";" ""Required""";"""Copying class objects""";
"""12-8-2""";"""Rule""";" ""Required""";"""Copying class objects""";
"""14-5-1""";"""Rule""";" ""Required""";"""Template declarations""";
"""14-5-2""";"""Rule""";" ""Required""";"""Template declarations""";
"""14-5-3""";"""Rule""";" ""Required""";"""Template declarations""";
"""14-6-1""";"""Rule""";" ""Required""";"""Name resolution""";
"""14-6-2""";"""Rule""";" ""Required""";"""Name resolution""";
"""14-7-1""";"""Rule""";" ""Required""";"""Template instantiation and specialization""";
"""14-7-2""";"""Rule""";" ""Required""";"""Template instantiation and specialization""";
"""14-7-3""";"""Rule""";" ""Required""";"""Template instantiation and specialization""";
"""14-8-1""";"""Rule""";" ""Required""";"""Function template specialization""";
"""14-8-2""";"""Rule""";"""Advisory""";"""Function template specialization""";
"""15-0-1""";"""Rule""";"""Document""";"""Exceptions handling - General""";
"""15-0-2""";"""Rule""";"""Advisory""";"""Exceptions handling - General""";
"""15-0-3""";"""Rule""";" ""Required""";"""Exceptions handling - General""";
"""15-1-1""";"""Rule""";" ""Required""";"""Throwing an exception""";
"""15-1-2""";"""Rule""";" ""Required""";"""Throwing an exception""";
"""15-1-3""";"""Rule""";" ""Required""";"""Throwing an exception""";
"""15-3-1""";"""Rule""";" ""Required""";"""Handling an exception""";
"""15-3-2""";"""Rule""";"""Advisory""";"""Handling an exception""";
"""15-3-3""";"""Rule""";" ""Required""";"""Handling an exception""";
"""15-3-4""";"""Rule""";" ""Required""";"""Handling an exception""";
"""15-3-5""";"""Rule""";" ""Required""";"""Handling an exception""";
"""15-3-6""";"""Rule""";" ""Required""";"""Handling an exception""";
"""15-3-7""";"""Rule""";" ""Required""";"""Handling an exception""";
"""15-4-1""";"""Rule""";" ""Required""";"""Exception specifications""";If a function is declared with an exception-specification, thenall declarations of the same function (in other translations units) shall be declared with the same set ot type-ids
"""15-5-1""";"""Rule""";" ""Required""";"""Exceptions handling - Special functions""";A class destructor shall not exit with an exception
"""15-5-2""";"""Rule""";" ""Required""";"""Exceptions handling - Special functions""";Where a function's declaration includes an exception-spcification, the function shall only be capable of throwing exceptions of the indicated type(s)
"""15-5-3""";"""Rule""";" ""Required""";"""Exceptions handling - Special functions""";The terminate() functions shall not be called implicitely
"""16-0-1""";"""Rule""";" ""Required""";"""Preprocessing directives - General""";#include directives shall not be called implicitely
"""16-0-2""";"""Rule""";" ""Required""";"""Preprocessing directives - General""";Macros shall only be #define'd or #undef'd in the global namespace
"""16-0-3""";"""Rule""";" ""Required""";"""Preprocessing directives - General""";#undef shall not be used
"""16-0-4""";"""Rule""";" ""Required""";"""Preprocessing directives - General""";Function-like macros shall not be defined
"""16-0-5""";"""Rule""";" ""Required""";"""Preprocessing directives - General""";Arguments to a function-like macro shall not contain tokens that look like preporcessing directives
"""16-0-6""";"""Rule""";" ""Required""";"""Preprocessing directives - General""";In the definition of a function-link macro shall not contain tokens that look like preprocessing directives
"""16-0-7""";"""Rule""";" ""Required""";"""Preprocessing directives - General""";Undefinde macro identifiers shall not be used in #if or #elif preprocessor directives, except as oprands to the defined operator
"""16-0-8""";"""Rule""";" ""Required""";"""Preprocessing directives - General""";If the # token appearsas the first token on a line then it shall be immediately followed by a preprocessing token
"""16-1-1""";"""Rule""";" ""Required""";"""Conditional inclusion""";The define preprocessor operator shall only be usde in one of the two standard forms
"""16-1-2""";"""Rule""";" ""Required""";"""Conditional inclusion""";All #else, #elif and preprocessor directives shall reside in the same file as the #if or #ifdef directive to which the are related
"""16-2-1""";"""Rule""";" ""Required""";"""Source file inclusion""";The pre-processor shall only be used for file includeion and include guards
"""16-2-2""";"""Rule""";" ""Required""";"""Source file inclusion""";C++ macros shall only be used for: include guards, type qualifiers or storage class spcifiers
"""16-2-3""";"""Rule""";" ""Required""";"""Source file inclusion""";Include guards shall be provided
"""16-2-4""";"""Rule""";" ""Required""";"""Source file inclusion""";"The',"",/* or // characters shall not occur in a header file name"
"""16-2-5""";"""Rule""";"""Advisory""";"""Source file inclusion""";The \ character should not occur in a header file name
"""16-2-6""";"""Rule""";" ""Required""";"""Source file inclusion""";"The #include directive shall be followed by either a <filename> or ""filename"" sequence"
"""16-3-1""";"""Rule""";" ""Required""";"""Macro replacement""";There shall be at most one occurrence of the # or ## operators in a single macro definition
"""16-3-2""";"""Rule""";"""Advisory""";"""Macro replacement""";The # and ## opreators should not be used
"""16-6-1""";"""Rule""";"""Document""";"""Pragma directive""";All uses of the #pragma directive shall be documented
"""17-0-1""";"""Rule""";" ""Required""";"""Library introduction - General""";Reserved identifiers, macros and functions in the standard library shall not be defined redefined or undefined
"""17-0-2""";"""Rule""";" ""Required""";"""Library introduction - General""";The names of standard library macros and objects shall not be reused
"""17-0-3""";"""Rule""";" ""Required""";"""Library introduction - General""";The names of standard library functions shall not be overridden
"""17-0-4""";"""Rule""";"""Document""";"""Library introduction - General""";All library  code shall conform MISRA C++
"""17-0-5""";"""Rule""";" ""Required""";"""Library introduction - General""";The setjmp macro and the longjmp function shall not be used
"""18-0-1""";"""Rule""";" ""Required""";"""Language support library - General""";The C library shall not be used
"""18-0-2""";"""Rule""";" ""Required""";"""Language support library - General""";The library functions atof, atoi and atol from library <cstdlib> shall not be used
"""18-0-3""";"""Rule""";" ""Required""";"""Language support library - General""";The library functions abort, exit, getenv and system from library <cstdlib> shall not be used
"""18-0-4""";"""Rule""";" ""Required""";"""Language support library - General""";The time handling functions of library <ctime> shall not be used
"""18-0-5""";"""Rule""";" ""Required""";"""Language support library - General""";The unbounded functions of library <cstring> shall not be used
"""18-2-1""";"""Rule""";" ""Required""";"""Language support library - Implementation properties""";The macro offsetof shall not be used
"""18-4-1""";"""Rule""";" ""Required""";"""Language support library - Dynamic memory management""";Dynamic heap memory allocation shall not be used
"""18-7-1""";"""Rule""";" ""Required""";"""Language support library - Other runtime support""";The signal handling facilities of <csignal> shall not be used
"""19-3-1""";"""Rule""";" ""Required""";"""Diagnostics library - Error numbers""";The error indicator errno shall not be used
"""27-0-1""";"""Rule""";" ""Required""";"""Input/output library - General""";The stream input/output library <cstdio> shall not be used
